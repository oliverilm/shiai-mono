import { createSlice } from '@reduxjs/toolkit';

import {
  ICategoryInCompetition,
  ICompetition,
  IJudokaInCompetition,
} from '../../@types/api-types';
import {
  fetchCompetitionsThunk,
  fetchWeightCategoriesInCompetitionThunk,
  getCompetitionJudokasThunk,
} from './actions';

export interface StateReducerI {
  competitions: ICompetition[];
  weightCategories: Record<string, ICategoryInCompetition[]>;
  registeredJudokas: Record<string, IJudokaInCompetition[]>;
}

const initialState: StateReducerI = {
  competitions: [],
  weightCategories: {},
  registeredJudokas: {},
};

export const statusSlice = createSlice({
  name: 'user',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {},
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.

  extraReducers: (builder) => {
    builder
      .addCase(fetchCompetitionsThunk.fulfilled, (state, action) => {
        state.competitions = action.payload;
      })
      .addCase(
        fetchWeightCategoriesInCompetitionThunk.fulfilled,
        (state, action) => {
          state.weightCategories = {
            ...state.weightCategories,
            ...action.payload,
          };
        },
      )
      .addCase(getCompetitionJudokasThunk.fulfilled, (state, action) => {
        state.registeredJudokas = {
          ...state.registeredJudokas,
          ...action.payload,
        };
      });
  },
});

export default statusSlice.reducer;
